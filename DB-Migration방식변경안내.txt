<Migration Project 변경작업>

NetCore.Web.V5 Startup.cs에서
Migration 관련 소스 수정을 위해
Db와 연결하는 DbContext를 DBFirstDbContext에서 CodeFirstDbContext로
임시로 바꾼다. (최종 소스에는 DBFirstDbContext가 사용되기에...)


Visual Studio Menu에서
View => Other Windows => Package Manager Console로 들어간다.
Console에서 Migration 파일생성을 위해 다음을 입력한다.
Add-Migration AddingTestTable -Context CodeFirstDbContext -Project NetCore.Migrations

Your startup project 'NetCore.Web.V5' doesn't reference
Microsoft.EntityFrameworkCore.Design.
This package is required for the Entity Framework Core Tools to work.
Ensure your startup project is correct, install the package, and try again.

그런데 실제 마이그레이션은 NetCore.Migrations 프로젝트에서 작업하기 때문에
NetCore.Web.V5가 아니라 NetCore.Migrations에 "Microsoft.EntityFrameworkCore.Design"
Package를 설치해야 한다.
이미 설치된 "Microsoft.EntityFrameworkCore.SqlServer" Package 버전과 맞추기 위해
2.1.2 버전으로 설치한다.
(현재 여러개의 Class Library 프로젝트들이 Core 2.1, 3.1, 5.0 세 개의 버전에서
 동작하도록 하기 위해 최소버전 2.1에 맞춰져 있어서 경고창이 뜨는 것이다.)
경고창이 뜨지만 일단 무시하고, 마이그레이션 명령어를 다시 입력한다.
Add-Migration AddingTestTable -Context CodeFirstDbContext -Project NetCore.Migrations

에러내용이 아래와 같이 바뀌었다.
Unable to create an object of type 'CodeFirstDbContext'.
Add an implementation of 'IDesignTimeDbContextFactory<CodeFirstDbContext>'
to the project, or see https://go.microsoft.com/fwlink/?linkid=851728
for additional patterns supported at design time.

마이그레이션 작업 프로젝트로 지정한 NetCore.Migrations에 CodeFirstDbContext 파일이
없어서 마이그레이션을 할 수 없다는 뜻이다.
추가적으로 마이그레이션을 위해서는 IDesignTimeDbContextFactory<CodeFirstDbContext>을
마이그레이션 프로젝트 내에서 사용해야 된다고 알려준다.
그래서 CodeFirstDbContext 파일이 있는 "NetCore.Services" 프로젝트로 마이그레이션
프로젝트를 변경한다.
최종 명령어는 다음과 같다.
Add-Migration AddingTestTable -Context CodeFirstDbContext -Project NetCore.Services

NetCore.Services에는 AddingUserTables.cs가 없으므로 명령어를 다시 작성한다.
Add-Migration AddingUserTable -Context CodeFirstDbContext -Project NetCore.Services

또한, NetCore.Services에 "Microsoft.EntityFrameworkCore.Design"
Package 2.1.2 버전을 설치한다.

그리고 CodeFirstDbContext를 도와줄 CodeFirstDbContextFactory 클래스를 추가한다.

... 이외에 몇 가지 작업을 추가한다.

전체 다시빌드를 한 번 해 준 후에, 아래와 같이 명령어를 실행한다.
Add-Migration AddingUserTable -Context CodeFirstDbContext -Project NetCore.Services

이제서야 이상없이 마이그레이션 파일이 생성된 것을 확인할 수 있다.

CodeFirstDB Table을 전부 삭제한다.

그리고 나서 DB에 마이그레이션 파일을 적용하기 위해 아래 명령어를 실행한다.
Update-Database -Context CodeFirstDbContext -Project NetCore.Services

마이그레이션과 DB 적용이 완료되었다.

NetCore.Web.V5 Startup.cs에서
Db와 연결하는 DbContext를 CodeFirstDbContext에서 DBFirstDbContext로
원래대로 돌려놓는다.

p.s. 앞으로는 NetCore.Migrations Project는 사용할 일이 없으므로 삭제하셔도 됩니다.
감사합니다.